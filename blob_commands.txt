#### The following variables have to be taken from the table in file : gc_min, gc_max, cov_min, cov_max
#### The Blobology pipeline was followed with some modifications
#### Blobology scripts from https://github.com/blaxterlab/blobology
#### filter_SPAdes_contigs.py is available at https://github.com/annamariafloriano/Midi4Mito2023.git


## Reads trimming

java -jar trimmomatic-0.36.jar PE -phred33 rawForward.fastq.gz rawReverse.fastq.gz TrimmedForward_paired.fq.gz TrimmedForward_unpaired.fq.gz TrimmedReverse_paired.fq.gz TrimmedReverse_unpaired.fq.gz ILLUMINACLIP:contams_forward_rev.fa:2:30:10 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:36


## Preliminary Assembly
python spades.py -1 TrimmedForward_paired.fq.gz -2 TrimmedReverse_paired.fq.gz --only-assembler -t 15 -m 400 -k 99 --phred-offset 64 -o PreliminaryAssembly

# remove unnecessary files
rm -r PreliminaryAssembly/tmp # remove tmp folder
rm -r PreliminaryAssembly/split_input # remove split_input folder
rm -r PreliminaryAssembly/mismatch_corrector
rm -r PreliminaryAssembly/misc
rm -r PreliminaryAssembly/K*
 

## Get taxids
blastn -task megablast -query contigs.fasta -db nt -evalue 1e-5 -num_threads 8 -max_target_seqs 1 -outfmt '6 qseqid staxids' -out PreliminaryTaxids.megablast


## Get coverage (map reads to preliminary assembly)
# index reference
bowtie2-build contigs.fasta contigs.fasta
bowtie2 -x contigs.fasta --very-fast-local -k 1 -t -p 10 --reorder --mm -1 TrimmedForward_paired.fq.gz -2 TrimmedReverse_paired.fq.gz -S mapped.sam 
# convert format: SAM to BAM
samtools view -SbT contigs.fasta mapped.sam > contigs.fasta.bowtie2.bam
# remove file SAM, only keep BAM
rm mapped.sam

# compress preliminary assembly contigs
gzip contigs.fasta


## Join all information in one table
# gc_cov_annotate.pl is provided by BlaxterLab at https://github.com/blaxterlab/blobology
# NCBI taxdump is required
perl gc_cov_annotate.pl --blasttaxid PreliminaryTaxids.megablast --assembly contigs.fasta --bam contigs.fasta.bowtie2.bam --out Preliminary_blobplot.tab --taxdump taxdump --taxlist species order phylum superkingdom


## Create blobplots and select contigs

# in R

library(ggplot2)
 
# read table
a=read.delim("Preliminary_blobplot.tab")

# plot contigs as points, colored according to superkingdom annotation, separated by length (logarithmic scale) and GC content
g1<-ggplot(a, aes(x=log10(a$len), y=a$gc, colour=a$taxlevel_superkingdom))+geom_point(size=0.7)+labs(x="Log10Len",y="GC%")
ggsave("Preliminary_plot_gc_loglen.png",g1)

# plot contigs longer than 1000nt as points, colored according to superkingdom annotation, separated by GC content and coverage (logarithmic scale)
a1000=subset(a, a$len>=1000)
g2<-ggplot(a1000,aes(x=a1000$gc, y=log10(a1000$cov_contigs.fasta.bowtie2.bam), colour=a1000$taxlevel_superkingdom))+geom_point(size=0.7)+labs(x="GC%", y="Log10Coverage")
ggsave("Preliminary_plot_gc_logcov_len1000.png",g2)

# select contigs according to GC content and coverage
s_blob <- subset(a, a$gc>=gc_min & a$gc<=gc_max & log10(a$cov_contigs.fasta.bowtie2.bam)>=cov_min & log10(a$cov_contigs.fasta.bowtie2.bam)<=cov_max) # see table for values of the different samples. When "NULL" in the table, remove the corresponding part in the command
write.table(s_blob, file="s_blob.tab",sep="\t", quote=F, row.names=F)

# select contigs according to annotation
s_blob <- subset(a, a$gc>=0.25 & a$gc<=0.5 & log10(a$cov_contigs.fasta.bowtie2.bam)>=2)
s_Rick <- subset(a, a$taxlevel_order=="Rickettsiales")
write.table(s_Rick, file="s_Rickettsiales.tab", quote=F, row.names=F, sep="\t")

## Obtain contigs lists

cut -f1 s_blob.tab > s_blob.lst
sed -i '1d' s_blob.lst # remove header
cut -f1 s_Rickettsiales.tab > s_Rickettsiales.lst
sed -i '1d' s_Rickettsiales.lst # remove header

# join the lists
cat s_blob.lst s_Rickettsiales.lst > blob_and_Rick_sel.tmp.lst
sort blob_and_Rick_sel.tmp.lst | uniq > blob_and_Rick_sel.lst


## Extract reads mapping to selected contigs, i.e. reads selected for reassembly of target genome
perl bowtie2_extract_reads_mapped_to_specific_contigs.pl -s <(samtools view contigs.fasta.bowtie2.bam) -id blob_and_Rick_sel.lst
python spades.py --12 blob_and_Rick_sel.lst.fq.gz --careful -t 10 -o reassembly
# in reassembly: split_input contains split reads used for the assembly (i.e. forward and reverse)

## Band sel
# Open the assembly graph of the reassembly in Bandage and use the "Draw" function. Blast published genome of M. mitochondrii str. IricVA against the contigs of the reassembly with default parameteres. Select all contigs containing a Midichloria hit and all contigs connected with them, directly or indirectly. Save the selected contigs: SelBand_contigs.fasta
# obtain list of selected contigs
grep ">" SelBand_contigs.fasta | sed -e 's/>//g' > SelBand_contigs.lst

# Map reads against the contigs selected from the reassembly (SelBand_contigs.fasta)
# index
bowtie2-build SelBand_contigs.fasta SelBand_contigs.fasta
bowtie2 -x SelBand_contigs.fasta --very-fast-local -k 1 -t -p 10 --reorder --mm -1 TrimmedForward_paired.fq.gz -2 TrimmedReverse_paired.fq.gz -S REmapped.sam 
# convert format: SAM to BAM
samtools view -SbT REcontigs.fasta mapped.sam > REcontigs.fasta.bowtie2.bam
# remove file SAM, only keep BAM
rm REmapped.sam

# Extract reads mapping to selected contigs, i.e. reads selected for reassembly of target genome
perl bowtie2_extract_reads_mapped_to_specific_contigs.pl -s <(samtools view REcontigs.fasta.bowtie2.bam) -id SelBand_contigs.lst

# assemble selected reads
python spades.py --12 SelBand_contigs.lst.fq.gz --careful -t 10 -o BandSel_reassembly

	
## Polishing from short contigs

# Get average contig length
cd BandSel_reassembly
grep ">" contigs.fasta | sed 's/>//g' > contigs.lst

R
l = read.delim("contigs.lst",sep="_",header=F)
avelen=mean(l$V4)
q()
n

# Remove contigs smaller than average contig length (avelen), use integer value (e.g. if avelen is 132.991 use 133; if avelen is 132.01 use 133)
python filter_SPAdes_contigs.py -i contigs.fasta -l [avelen, INT] -o final_contigs.fasta



